// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(EcommContext))]
    [Migration("20240317184557_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("UfId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("UfId");

                    b.ToTable("City", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Acrelândia",
                            UfId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Assis Brasil",
                            UfId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Brasiléia",
                            UfId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bujari",
                            UfId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Capixaba",
                            UfId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cruzeiro do Sul",
                            UfId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Epitaciolândia",
                            UfId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Feijó",
                            UfId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Jordão",
                            UfId = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Mâncio Lima",
                            UfId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.PhotoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photo", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("nvarchar(26)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<DateTime>("LimitDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("TradeFor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UrgencyType")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Type");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UfEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("Id");

                    b.HasIndex("Acronym")
                        .IsUnique();

                    b.ToTable("Uf", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Acronym = "AC",
                            Name = "Acre"
                        },
                        new
                        {
                            Id = 2,
                            Acronym = "AL",
                            Name = "Alagoas"
                        },
                        new
                        {
                            Id = 3,
                            Acronym = "AP",
                            Name = "Amapá"
                        },
                        new
                        {
                            Id = 4,
                            Acronym = "AM",
                            Name = "Amazonas"
                        },
                        new
                        {
                            Id = 5,
                            Acronym = "BA",
                            Name = "Bahia"
                        },
                        new
                        {
                            Id = 6,
                            Acronym = "CE",
                            Name = "Ceará"
                        },
                        new
                        {
                            Id = 7,
                            Acronym = "DF",
                            Name = "Distrito Federal"
                        },
                        new
                        {
                            Id = 8,
                            Acronym = "ES",
                            Name = "Espírito Santo"
                        },
                        new
                        {
                            Id = 9,
                            Acronym = "GO",
                            Name = "Goiás"
                        },
                        new
                        {
                            Id = 10,
                            Acronym = "MA",
                            Name = "Maranhão"
                        },
                        new
                        {
                            Id = 11,
                            Acronym = "MT",
                            Name = "Mato Grosso"
                        },
                        new
                        {
                            Id = 12,
                            Acronym = "MS",
                            Name = "Mato Grosso do Sul"
                        },
                        new
                        {
                            Id = 13,
                            Acronym = "MG",
                            Name = "Minas Gerais"
                        },
                        new
                        {
                            Id = 14,
                            Acronym = "PA",
                            Name = "Pará"
                        },
                        new
                        {
                            Id = 15,
                            Acronym = "PB",
                            Name = "Paraíba"
                        },
                        new
                        {
                            Id = 16,
                            Acronym = "PR",
                            Name = "Paraná"
                        },
                        new
                        {
                            Id = 17,
                            Acronym = "PE",
                            Name = "Pernambuco"
                        },
                        new
                        {
                            Id = 18,
                            Acronym = "PI",
                            Name = "Piauí"
                        },
                        new
                        {
                            Id = 19,
                            Acronym = "RJ",
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = 20,
                            Acronym = "RN",
                            Name = "Rio Grande do Norte"
                        },
                        new
                        {
                            Id = 21,
                            Acronym = "RS",
                            Name = "Rio Grande do Sul"
                        },
                        new
                        {
                            Id = 22,
                            Acronym = "RO",
                            Name = "Rondônia"
                        },
                        new
                        {
                            Id = 23,
                            Acronym = "RR",
                            Name = "Roraima"
                        },
                        new
                        {
                            Id = 24,
                            Acronym = "SC",
                            Name = "Santa Catarina"
                        },
                        new
                        {
                            Id = 25,
                            Acronym = "SP",
                            Name = "São Paulo"
                        },
                        new
                        {
                            Id = 26,
                            Acronym = "SE",
                            Name = "Sergipe"
                        },
                        new
                        {
                            Id = 27,
                            Acronym = "TO",
                            Name = "Tocantins"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("UserAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "administrador.ecommerce@vibbra.com",
                            Name = "Administrador",
                            Password = "12345"
                        });
                });

            modelBuilder.Entity("PhotoEntityProductEntity", b =>
                {
                    b.Property<int>("PhotosId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("PhotosId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("PhotoEntityProductEntity");
                });

            modelBuilder.Entity("Domain.Entities.CityEntity", b =>
                {
                    b.HasOne("Domain.Entities.UfEntity", "Uf")
                        .WithMany("Cities")
                        .HasForeignKey("UfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uf");
                });

            modelBuilder.Entity("Domain.Entities.ProductEntity", b =>
                {
                    b.HasOne("Domain.Entities.CityEntity", "City")
                        .WithMany("Products")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("PhotoEntityProductEntity", b =>
                {
                    b.HasOne("Domain.Entities.PhotoEntity", null)
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.CityEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.UfEntity", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
